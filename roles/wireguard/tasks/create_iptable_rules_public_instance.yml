# iptables rules to apply for a public instance
---
- name: accept established connections
  iptables:
    ip_version: "{{ item.0 }}"
    chain: "{{ item.1 }}"
    ctstate: RELATED,ESTABLISHED
    jump: ACCEPT
  become: yes
  with_nested:
    - [ 'ipv4', 'ipv6' ]
    - [ 'INPUT', 'FORWARD' ]
  notify:
    - persist iptables

- name: accept wireguard connections
  iptables:
    ip_version: "{{ item }}"
    chain: INPUT
    ctstate: NEW
    destination_port: "{{ wireguard.listenport}}"
    protocol: udp
    jump: ACCEPT
  become: yes
  with_items:
    - ipv4
    - ipv6
  notify:
    - persist iptables

# If we are a public instance
- name: accept dns requests from wireguard peers
  iptables:
    ip_version: ipv6
    chain: INPUT
    ctstate: NEW
    jump: ACCEPT
    destination_port: 53
    protocol: "{{ item.1 }}"
    source: "{{ hostvars[item.0].wireguard.private_ip6 }}/128"
  with_nested:
    - "{{ hostvars.keys() }}"
    - [ 'tcp', 'udp' ]
  when:
    - item.0 != inventory_hostname
    - hostvars[item.0].wireguard is defined
  notify:
    - persist iptables

- name: allow forwarding of packets that stay in the tunnel
  iptables:
    ip_version: "{{ item }}"
    chain: FORWARD
    ctstate: NEW
    in_interface: wg0
    out_interface: wg0
    jump: ACCEPT
  with_items:
    - ipv4
    - ipv6
  notify:
    - persist iptables

# TODO: parametrize interface names
- name: allow forwarding of packets from peers to the Internet
  iptables:
    ip_version: ipv6
    chain: FORWARD
    source: "{{ hostvars[item].wireguard.routed_ip6_block }}/{{ hostvars[item].wireguard.routed_ip6_blocksize }}"
    in_interface: wg0
    out_interface: enp0s20
    ctstate: NEW
    jump: ACCEPT
  with_inventory_hostnames:
    - all
  when:
    - item != inventory_hostname
    - hostvars[item].wireguard is defined
    - hostvars[item].wireguard.routed_ip6_block is defined
