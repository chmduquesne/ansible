---

- name: enable ipv6 forwarding for all interfaces
  sysctl: name=net.ipv6.conf.all.forwarding value=1

- name: create dedicated routing table
  lineinfile:
    dest: /etc/iproute2/rt_tables
    line: "200 {{ wgnet }}.routes"

- name: get upstream inet6 address
  set_fact:
    upstream_inet6_addr: "{{ hostvars[item].wireguard[wgnet].inet6_addr }}"
  with_items:
    "{{ peers }}"
  when:
    - hostvars[item].wireguard[wgnet].out_gw is defined

- name: post-up routing for the net
  set_fact:
    net_post_up:
      - "echo 1 > /proc/sys/net/ipv6/conf/{{ wgnet }}/forwarding"
      - "ip route flush table {{ wgnet }}.routes"
      - "ip route add default via {{ upstream_inet6_addr }} dev {{ wgnet }} table {{ wgnet }}.routes"

      - set_fact: # TODO: wireguard[wgnet] == conf?
    routed_inet6_range: "{{ wireguard[wgnet].in_gw.inet6_prefix }}::/{{ wireguard[wgnet].in_gw.inet6_mask }}"

- name: collect post-up routing commands for the wlan interface
  set_fact:
    wlan_post_up:
      - "ip -6 route add {{ routed_inet6_range }} dev {{ wireguard[wgnet].in_gw.interface }} table {{ wgnet }}.routes"
      - "ip -6 rule add from {{ routed_inet6_range }} lookup {{ wgnet }}.routes"

- name: get existing wlan settings
  set_fact:
    wlan_settings: "{{ item }}"
  with_items:
    "{{ network_interfaces_interfaces }}"
  when:
    - item.device == wireguard[wgnet].in_gw.interface

- name: removing existing wlan setting
  set_fact:
    network_interfaces_interfaces: "{{ network_interfaces_interfaces | difference([ wlan_settings ]) }}"

- name: creating new wlan settings with the additional post-up commands
  set_fact:
    wlan_settings: "{{ wlan_settings | combine({'post-up' : wlan_post_up}) }}"

- name: re-adding modified the modified wlan settings
  set_fact:
    network_interfaces_interfaces: "{{ network_interfaces_interfaces | union([ wlan_settings ]) }}"
