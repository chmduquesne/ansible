# iptables rules to apply for a public instance
---
- name: accept established connections
  iptables:
    ip_version: "{{ item.0 }}"
    chain: "{{ item.1 }}"
    ctstate: RELATED,ESTABLISHED
    jump: ACCEPT
  become: yes
  with_nested:
    - [ 'ipv4', 'ipv6' ]
    - [ 'INPUT', 'FORWARD' ]
  notify:
    - persist iptables

- name: accept wireguard connections
  iptables:
    ip_version: "{{ item }}"
    chain: INPUT
    ctstate: NEW
    destination_port: "{{ conf.listenport}}"
    protocol: udp
    jump: ACCEPT
  become: yes
  with_items:
    - ipv4
    - ipv6
  notify:
    - persist iptables

# If we are a public instance
- name: accept dns requests from peers
  iptables:
    ip_version: ipv6
    chain: INPUT
    ctstate: NEW
    jump: ACCEPT
    destination_port: 53
    protocol: "{{ item.1 }}"
    source: "{{ hostvars[item.0].wireguard[net].inet6_addr }}/128"
  with_nested:
    - "{{ peers }}"
    - [ 'tcp', 'udp' ]
  notify:
    - persist iptables

- name: allow forwarding of packets that stay in the tunnel
  iptables:
    ip_version: "{{ item }}"
    chain: FORWARD
    ctstate: NEW
    in_interface: "{{ net }}"
    out_interface: "{{ net }}"
    jump: ACCEPT
  with_items:
    - ipv4
    - ipv6
  notify:
    - persist iptables

# TODO: parametrize interface names
- name: allow forwarding of packets from peers to the Internet
  iptables:
    ip_version: ipv6
    chain: FORWARD
    source: "{{ hostvars[item].wireguard[net].router.inet6_prefix }}::/{{ hostvars[item].wireguard[net].router.inet6_mask }}"
    in_interface: "{{ net }}"
    out_interface: enp0s20
    ctstate: NEW
    jump: ACCEPT
  with_items:
    - "{{ peers }}"
  when:
    - hostvars[item].wireguard.router is defined
    - hostvars[item].wireguard.router.inet6_prefix is defined
